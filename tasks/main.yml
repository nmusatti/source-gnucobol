---
# tasks file for source-gnucobol
- name: Create the GnuCOBOL installation group
  ansible.builtin.group:
    name: "{{ gnucobol_group }}"
  become: true

- name: Create the GnuCOBOL installation owner
  ansible.builtin.user:
    name: "{{ gnucobol_user }}"
    group: "{{ gnucobol_group }}"
  become: true

- name: Install dependencies (RedHat distros)
  ansible.builtin.yum:
    name:
      - gcc
      - gmp
      - gmp-devel
      - libdb
      - libdb-devel
      - libtool
      - make
      - ncurses
      - ncurses-devel
      - ncurses-libs
      - perl
      - tar
      - wget
    state: present
  become: true
  retries: 3
  delay: 3
  when: ansible_facts['os_family'] == "RedHat"

- name: Install dependencies (Ubuntu)
  ansible.builtin.apt:
    name:
      - gcc
      - libgmp-dev
      - libdb-dev
      - libtool
      - make
      - libncurses-dev
      - perl
      - tar
      - wget
    state: present
  become: true
  retries: 3
  delay: 3
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Delete source directory
  ansible.builtin.file:
    path: "{{ gnucobol_src_dir }}"
    state: absent
  become: true
  when: gnucobol_force

- name: Create source directory
  ansible.builtin.file:
    group: "{{ gnucobol_group }}"
    mode: 0755
    owner: "{{ gnucobol_user }}"
    path: "{{ gnucobol_src_dir }}"
    state: directory
  become: true

- name: Remove the archive
  ansible.builtin.file:
    path: "{{ gnucobol_src_dir }}/{{ gnucobol_archive }}"
    state: absent
  become: true
  when: gnucobol_force

- name: Check the archive isn't already available
  ansible.builtin.stat:
    path: "{{ gnucobol_src_dir }}/{{ gnucobol_archive }}"
  register: archive_stat_result

- name: Download the source archive
  ansible.builtin.get_url:
    dest: "{{ gnucobol_src_dir }}"
    group: "{{ gnucobol_group }}"
    owner: "{{ gnucobol_user }}"
    url: "{{ gnucobol_url }}"
    mode: 0644
    timeout: 30
  become: true
  retries: 10
  delay: 5
  when: not archive_stat_result.stat.exists

- name: Unpack the source archive
  ansible.builtin.unarchive:
    src: "{{ gnucobol_src_dir }}/{{ gnucobol_archive }}"
    dest: "{{ gnucobol_src_dir }}"
    group: "{{ gnucobol_group }}"
    owner: "{{ gnucobol_user }}"
    mode: 0755
    remote_src: true
  become: true

- name: Check configure hasn't run
  ansible.builtin.stat:
    path: "{{ gnucobol_src_dir }}/gnucobol-{{
    gnucobol_versions[gnucobol_release] }}/config.log"
  register: configure_stat_result

- name: Run ./configure
  ansible.builtin.command: >
    ./configure --prefix={{ gnucobol_install_dir }}/gnucobol-{{
    gnucobol_release }} chdir={{ gnucobol_src_dir }}/gnucobol-{{
    gnucobol_versions[gnucobol_release] }}
  become: true
  become_user: "{{ gnucobol_user }}"
  register: configure_result
  when: not configure_stat_result.stat.exists

- name: Run make
  community.general.system.make:
    chdir: "{{ gnucobol_src_dir }}/gnucobol-{{
    gnucobol_versions[gnucobol_release] }}"
  become: true
  become_user: "{{ gnucobol_user }}"
  register: make_result
  when: configure_result is not skipped

- name: Delete installation directory
  ansible.builtin.file:
    path: "{{ gnucobol_install_dir }}/gnucobol-{{ gnucobol_release }}"
    state: absent
  become: true
  when: gnucobol_force and make_result is not skipped

- name: Run make install
  community.general.system.make:
    chdir: "{{ gnucobol_src_dir }}/gnucobol-{{
    gnucobol_versions[gnucobol_release] }}"
    target: install
  become: true
  register: install_result
  when: make_result is not skipped

- name: Set permissions
  ansible.builtin.file:
    path: "{{ gnucobol_install_dir }}/gnucobol-{{ gnucobol_release }}"
    owner: "{{ gnucobol_user }}"
    group: "{{ gnucobol_group }}"
    recurse: true
  become: true
  when: install_result is not skipped
